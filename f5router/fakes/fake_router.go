// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/F5Networks/cf-bigip-ctlr/f5router"
	"github.com/F5Networks/cf-bigip-ctlr/f5router/routeUpdate"
	"github.com/F5Networks/cf-bigip-ctlr/servicebroker/planResources"
)

type FakeRouter struct {
	AddPlansStub        func(plans map[string]planResources.Plan)
	addPlansMutex       sync.RWMutex
	addPlansArgsForCall []struct {
		plans map[string]planResources.Plan
	}
	VerifyPlanExistsStub        func(planID string) error
	verifyPlanExistsMutex       sync.RWMutex
	verifyPlanExistsArgsForCall []struct {
		planID string
	}
	verifyPlanExistsReturns struct {
		result1 error
	}
	verifyPlanExistsReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateRouteStub        func(ru routeUpdate.RouteUpdate)
	updateRouteMutex       sync.RWMutex
	updateRouteArgsForCall []struct {
		ru routeUpdate.RouteUpdate
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRouter) AddPlans(plans map[string]planResources.Plan) {
	fake.addPlansMutex.Lock()
	fake.addPlansArgsForCall = append(fake.addPlansArgsForCall, struct {
		plans map[string]planResources.Plan
	}{plans})
	fake.recordInvocation("AddPlans", []interface{}{plans})
	fake.addPlansMutex.Unlock()
	if fake.AddPlansStub != nil {
		fake.AddPlansStub(plans)
	}
}

func (fake *FakeRouter) AddPlansCallCount() int {
	fake.addPlansMutex.RLock()
	defer fake.addPlansMutex.RUnlock()
	return len(fake.addPlansArgsForCall)
}

func (fake *FakeRouter) AddPlansArgsForCall(i int) map[string]planResources.Plan {
	fake.addPlansMutex.RLock()
	defer fake.addPlansMutex.RUnlock()
	return fake.addPlansArgsForCall[i].plans
}

func (fake *FakeRouter) VerifyPlanExists(planID string) error {
	fake.verifyPlanExistsMutex.Lock()
	ret, specificReturn := fake.verifyPlanExistsReturnsOnCall[len(fake.verifyPlanExistsArgsForCall)]
	fake.verifyPlanExistsArgsForCall = append(fake.verifyPlanExistsArgsForCall, struct {
		planID string
	}{planID})
	fake.recordInvocation("VerifyPlanExists", []interface{}{planID})
	fake.verifyPlanExistsMutex.Unlock()
	if fake.VerifyPlanExistsStub != nil {
		return fake.VerifyPlanExistsStub(planID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.verifyPlanExistsReturns.result1
}

func (fake *FakeRouter) VerifyPlanExistsCallCount() int {
	fake.verifyPlanExistsMutex.RLock()
	defer fake.verifyPlanExistsMutex.RUnlock()
	return len(fake.verifyPlanExistsArgsForCall)
}

func (fake *FakeRouter) VerifyPlanExistsArgsForCall(i int) string {
	fake.verifyPlanExistsMutex.RLock()
	defer fake.verifyPlanExistsMutex.RUnlock()
	return fake.verifyPlanExistsArgsForCall[i].planID
}

func (fake *FakeRouter) VerifyPlanExistsReturns(result1 error) {
	fake.VerifyPlanExistsStub = nil
	fake.verifyPlanExistsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouter) VerifyPlanExistsReturnsOnCall(i int, result1 error) {
	fake.VerifyPlanExistsStub = nil
	if fake.verifyPlanExistsReturnsOnCall == nil {
		fake.verifyPlanExistsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.verifyPlanExistsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouter) UpdateRoute(ru routeUpdate.RouteUpdate) {
	fake.updateRouteMutex.Lock()
	fake.updateRouteArgsForCall = append(fake.updateRouteArgsForCall, struct {
		ru routeUpdate.RouteUpdate
	}{ru})
	fake.recordInvocation("UpdateRoute", []interface{}{ru})
	fake.updateRouteMutex.Unlock()
	if fake.UpdateRouteStub != nil {
		fake.UpdateRouteStub(ru)
	}
}

func (fake *FakeRouter) UpdateRouteCallCount() int {
	fake.updateRouteMutex.RLock()
	defer fake.updateRouteMutex.RUnlock()
	return len(fake.updateRouteArgsForCall)
}

func (fake *FakeRouter) UpdateRouteArgsForCall(i int) routeUpdate.RouteUpdate {
	fake.updateRouteMutex.RLock()
	defer fake.updateRouteMutex.RUnlock()
	return fake.updateRouteArgsForCall[i].ru
}

func (fake *FakeRouter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addPlansMutex.RLock()
	defer fake.addPlansMutex.RUnlock()
	fake.verifyPlanExistsMutex.RLock()
	defer fake.verifyPlanExistsMutex.RUnlock()
	fake.updateRouteMutex.RLock()
	defer fake.updateRouteMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRouter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ f5router.Router = new(FakeRouter)
